import plopp as pp
import scipp as sc
import numpy as np

def _teapot_vertices_faces():
    """
    alues extracted from the Utah teapot: https://graphics.cs.utah.edu/courses/cs6620/fall2013/?prj=5
    using PyWavefront https://pypi.org/project/PyWavefront/

    >> import pywavefront
    >> scene = pywavefront.Wavefront('path/to/teapot-low.obj', collect_faces=True)
    >> vertices = scene.vertices
    >> faces = scene.meshes[None].faces
    """
    vertices = [(7.0, 0.0, 12.0), (4.97, -4.97, 12.0), (4.9811, -4.9811, 12.4922), (7.0156, 0.0, 12.4922),
                (5.325, -5.325, 12.0), (7.5, 0.0, 12.0), (0.0, -7.0, 12.0), (0.0, -7.0156, 12.4922), (0.0, -7.5, 12.0),
                (-5.1387, -4.97, 12.0), (-5.0022, -4.9811, 12.4922), (-5.325, -5.325, 12.0), (-7.0, 0.0, 12.0),
                (-7.0156, 0.0, 12.4922), (-7.5, 0.0, 12.0), (-4.97, 4.97, 12.0), (-4.9811, 4.9811, 12.4922),
                (-5.325, 5.325, 12.0), (0.0, 7.0, 12.0), (0.0, 7.0156, 12.4922), (0.0, 7.5, 12.0), (4.97, 4.97, 12.0),
                (4.9811, 4.9811, 12.4922), (5.325, 5.325, 12.0), (6.5453, -6.5453, 8.1094), (9.2188, 0.0, 8.1094),
                (7.1, -7.1, 4.5), (10.0, 0.0, 4.5), (0.0, -9.2188, 8.1094), (0.0, -10.0, 4.5),
                (-6.5453, -6.5453, 8.1094), (-7.1, -7.1, 4.5), (-9.2188, 0.0, 8.1094), (-10.0, 0.0, 4.5),
                (-6.5453, 6.5453, 8.1094), (-7.1, 7.1, 4.5), (0.0, 9.2188, 8.1094), (0.0, 10.0, 4.5),
                (6.5453, 6.5453, 8.1094), (7.1, 7.1, 4.5), (6.2125, -6.2125, 1.9219), (8.75, 0.0, 1.9219),
                (5.325, -5.325, 0.75), (7.5, 0.0, 0.75), (0.0, -8.75, 1.9219), (0.0, -7.5, 0.75),
                (-6.2125, -6.2125, 1.9219), (-5.325, -5.325, 0.75), (-8.75, 0.0, 1.9219), (-7.5, 0.0, 0.75),
                (-6.2125, 6.2125, 1.9219), (-5.325, 5.325, 0.75), (0.0, 8.75, 1.9219), (0.0, 7.5, 0.75),
                (6.2125, 6.2125, 1.9219), (5.325, 5.325, 0.75), (4.5595, -4.5595, 0.2344), (6.4219, 0.0, 0.2344),
                (0.0, 0.0, 0.0), (0.0, -6.4219, 0.2344), (-4.5595, -4.5595, 0.2344), (-6.4219, 0.0, 0.2344),
                (-4.5595, 4.5595, 0.2344), (0.0, 6.4219, 0.2344), (4.5595, 4.5595, 0.2344), (-8.0, 0.0, 10.125),
                (-7.75, -1.125, 10.6875), (-12.5938, -1.125, 10.4766), (-12.0625, 0.0, 9.9844), (-14.25, -1.125, 9.0),
                (-13.5, 0.0, 9.0), (-7.5, 0.0, 11.25), (-13.125, 0.0, 10.9688), (-15.0, 0.0, 9.0),
                (-7.75, 1.125, 10.6875), (-12.5938, 1.125, 10.4766), (-14.25, 1.125, 9.0), (-13.1719, -1.125, 6.2695),
                (-12.6875, 0.0, 6.75), (-9.75, -1.125, 3.75), (-13.6563, 0.0, 5.7891), (-9.5, 0.0, 3.0),
                (-13.1719, 1.125, 6.2695), (-9.75, 1.125, 3.75), (8.5, 0.0, 7.125), (8.5, -2.475, 5.0625),
                (12.6875, -1.7062, 8.1094), (11.9375, 0.0, 9.0), (15.0, -0.9375, 12.0), (13.5, 0.0, 12.0),
                (8.5, 0.0, 3.0), (13.4375, 0.0, 7.2187), (16.5, 0.0, 12.0), (8.5, 2.475, 5.0625),
                (12.6875, 1.7062, 8.1094), (15.0, 0.9375, 12.0), (15.6328, -0.75, 12.334), (14.125, 0.0, 12.2813),
                (15.0, -0.5625, 12.0), (14.0, 0.0, 12.0), (17.1406, 0.0, 12.3867), (16.0, 0.0, 12.0),
                (15.6328, 0.75, 12.334), (15.0, 0.5625, 12.0), (1.1552, -1.1552, 14.9063), (1.625, 0.0, 14.9063),
                (0.0, 0.0, 15.75), (0.71, -0.71, 13.5), (1.0, 0.0, 13.5), (0.0, -1.625, 14.9063), (0.0, -1.0, 13.5),
                (-1.1552, -1.1552, 14.9063), (-0.71, -0.71, 13.5), (-1.625, 0.0, 14.9063), (-1.0, 0.0, 13.5),
                (-1.1552, 1.1552, 14.9063), (-0.71, 0.71, 13.5), (0.0, 1.625, 14.9063), (0.0, 1.0, 13.5),
                (1.1552, 1.1552, 14.9063), (0.71, 0.71, 13.5), (2.9288, -2.9288, 12.75), (4.125, 0.0, 12.75),
                (4.615, -4.615, 12.0), (6.5, 0.0, 12.0), (0.0, -4.125, 12.75), (0.0, -6.5, 12.0),
                (-2.9288, -2.9288, 12.75), (-4.615, -4.615, 12.0), (-4.125, 0.0, 12.75), (-6.5, 0.0, 12.0),
                (-2.9288, 2.9288, 12.75), (-4.615, 4.615, 12.0), (0.0, 4.125, 12.75), (0.0, 6.5, 12.0),
                (2.9288, 2.9288, 12.75), (4.615, 4.615, 12.0)]
    faces = [[0, 1, 2], [3, 0, 2], [3, 2, 4], [5, 3, 4], [1, 6, 7], [2, 1, 7], [2, 7, 8], [4, 2, 8], [6, 9, 10],
             [7, 6, 10], [7, 10, 11], [8, 7, 11], [9, 12, 13], [10, 9, 13], [10, 13, 14], [11, 10, 14], [12, 15, 16],
             [13, 12, 16], [13, 16, 17], [14, 13, 17], [15, 18, 19], [16, 15, 19], [16, 19, 20], [17, 16, 20],
             [18, 21, 22], [19, 18, 22], [19, 22, 23], [20, 19, 23], [21, 0, 3], [22, 21, 3], [22, 3, 5], [23, 22, 5],
             [5, 4, 24], [25, 5, 24], [25, 24, 26], [27, 25, 26], [4, 8, 28], [24, 4, 28], [24, 28, 29], [26, 24, 29],
             [8, 11, 30], [28, 8, 30], [28, 30, 31], [29, 28, 31], [11, 14, 32], [30, 11, 32], [30, 32, 33],
             [31, 30, 33], [14, 17, 34], [32, 14, 34], [32, 34, 35], [33, 32, 35], [17, 20, 36], [34, 17, 36],
             [34, 36, 37], [35, 34, 37], [20, 23, 38], [36, 20, 38], [36, 38, 39], [37, 36, 39], [23, 5, 25],
             [38, 23, 25], [38, 25, 27], [39, 38, 27], [27, 26, 40], [41, 27, 40], [41, 40, 42], [43, 41, 42],
             [26, 29, 44], [40, 26, 44], [40, 44, 45], [42, 40, 45], [29, 31, 46], [44, 29, 46], [44, 46, 47],
             [45, 44, 47], [31, 33, 48], [46, 31, 48], [46, 48, 49], [47, 46, 49], [33, 35, 50], [48, 33, 50],
             [48, 50, 51], [49, 48, 51], [35, 37, 52], [50, 35, 52], [50, 52, 53], [51, 50, 53], [37, 39, 54],
             [52, 37, 54], [52, 54, 55], [53, 52, 55], [39, 27, 41], [54, 39, 41], [54, 41, 43], [55, 54, 43],
             [43, 42, 56], [57, 43, 56], [57, 56, 58], [42, 45, 59], [56, 42, 59], [56, 59, 58], [45, 47, 60],
             [59, 45, 60], [59, 60, 58], [47, 49, 61], [60, 47, 61], [60, 61, 58], [49, 51, 62], [61, 49, 62],
             [61, 62, 58], [51, 53, 63], [62, 51, 63], [62, 63, 58], [53, 55, 64], [63, 53, 64], [63, 64, 58],
             [55, 43, 57], [64, 55, 57], [64, 57, 58], [65, 66, 67], [68, 65, 67], [68, 67, 69], [70, 68, 69],
             [66, 71, 72], [67, 66, 72], [67, 72, 73], [69, 67, 73], [71, 74, 75], [72, 71, 75], [72, 75, 76],
             [73, 72, 76], [74, 65, 68], [75, 74, 68], [75, 68, 70], [76, 75, 70], [70, 69, 77], [78, 70, 77],
             [78, 77, 79], [33, 78, 79], [69, 73, 80], [77, 69, 80], [77, 80, 81], [79, 77, 81], [73, 76, 82],
             [80, 73, 82], [80, 82, 83], [81, 80, 83], [76, 70, 78], [82, 76, 78], [82, 78, 33], [83, 82, 33],
             [84, 85, 86], [87, 84, 86], [87, 86, 88], [89, 87, 88], [85, 90, 91], [86, 85, 91], [86, 91, 92],
             [88, 86, 92], [90, 93, 94], [91, 90, 94], [91, 94, 95], [92, 91, 95], [93, 84, 87], [94, 93, 87],
             [94, 87, 89], [95, 94, 89], [89, 88, 96], [97, 89, 96], [97, 96, 98], [99, 97, 98], [88, 92, 100],
             [96, 88, 100], [96, 100, 101], [98, 96, 101], [92, 95, 102], [100, 92, 102], [100, 102, 103],
             [101, 100, 103], [95, 89, 97], [102, 95, 97], [102, 97, 99], [103, 102, 99], [104, 105, 106],
             [105, 104, 107], [108, 105, 107], [109, 104, 106], [104, 109, 110], [107, 104, 110], [111, 109, 106],
             [109, 111, 112], [110, 109, 112], [113, 111, 106], [111, 113, 114], [112, 111, 114], [115, 113, 106],
             [113, 115, 116], [114, 113, 116], [117, 115, 106], [115, 117, 118], [116, 115, 118], [119, 117, 106],
             [117, 119, 120], [118, 117, 120], [105, 119, 106], [119, 105, 108], [120, 119, 108], [108, 107, 121],
             [122, 108, 121], [122, 121, 123], [124, 122, 123], [107, 110, 125], [121, 107, 125], [121, 125, 126],
             [123, 121, 126], [110, 112, 127], [125, 110, 127], [125, 127, 128], [126, 125, 128], [112, 114, 129],
             [127, 112, 129], [127, 129, 130], [128, 127, 130], [114, 116, 131], [129, 114, 131], [129, 131, 132],
             [130, 129, 132], [116, 118, 133], [131, 116, 133], [131, 133, 134], [132, 131, 134], [118, 120, 135],
             [133, 118, 135], [133, 135, 136], [134, 133, 136], [120, 108, 122], [135, 120, 122], [135, 122, 124],
             [136, 135, 124]]

    return vertices, faces


def teapot(transform: sc.Variable | None = None, intensity=1) -> tuple[sc.DataArray, sc.Variable, dict[str, str]]:
    """
    Return a DataArray, triangulation, and naming information for the single-teapot polyhedron 'mesh'
    """
    vertices, faces = _teapot_vertices_faces()

    names = dict(point='teapot', vertex='vertex', intensity='intensity')
    fold_to = {names['point']: 1, names['vertex']: len(vertices)}

    vertices = sc.vectors(dims=['v'], values=vertices, unit='m').fold(dim='v', sizes=fold_to)
    faces = sc.array(values=faces, dims=['face', 'triangle'])

    if isinstance(transform, sc.Variable):
        dt = transform.dtype
        if dt == sc.DType.affine_transform3 or dt == sc.DType.linear_transform3:
            vertices = transform * vertices
        elif dt == sc.DType.vector3:
            vertices += transform
        elif dt == sc.DType.translation3:
            vertices = transform * vertices
        else:
            print(f'Unhandled variable dtype {dt}')

    if isinstance(intensity, (int, float, np.int32, np.int64, np.float32, np.float64)):
        intensity = sc.array(dims=[names['point']], values=[intensity], unit='counts')
    elif isinstance(intensity, (list, tuple, np.ndarray)) and len(intensity) == fold_to[names['vertex']]:
        intensity = sc.array(dims=['v'], values=intensity, unit='counts').fold(dim='v', sizes=fold_to)
    else:
        raise ValueError('Intensity is unsupported scalar or has wrong number of elements')

    mesh = sc.DataArray(data=vertices, coords={names['intensity']: intensity})
    return mesh, faces, names


def make_one_teapot_mesh3d(**kwargs):
    mesh, faces, names = teapot()
    return pp.mesh3d(mesh, faces, **names, **kwargs)


def make_two_teapots_mesh3d(**kwargs):
    x0 = sc.spatial.translation(value=[40, 0, 10], unit='m')
    s0 = sc.spatial.scaling_from_vector(value=[1, 0.3, 1])
    r0 = sc.spatial.rotations_from_rotvecs(sc.vector(value=[-90, 0, 0], unit='degree'))
    t0, _, _ = teapot(intensity=1, transform=s0*r0*x0)
    t1, faces, names = teapot(intensity=2)

    a = names['point']
    b = names['intensity']
    ts = sc.DataArray(data=sc.concat((t0.data, t1.data), dim=a),
                      coords={b: sc.concat((t0.coords[b], t1.coords[b]), dim=a)})
    return pp.mesh3d(ts, faces, **names, **kwargs)


def make_many_teapots_mesh3d(number: int = 100, seed: int = 1, **kwargs):
    rng = np.random.default_rng(seed)
    x = sc.vector(value=[1, 0, 0], unit='m')
    z = sc.vector(value=[0, 0, 1], unit='m')
    theta = sc.arange(start=0., stop=360., step=360/number, dim='teapot', unit='degree')
    ry = sc.spatial.rotations_from_rotvecs(sc.vector(value=[0, 1, 0]) * theta)
    tz = 300 * sc.vector(value=[0, 1, 0], unit='m') * sc.sin(theta) ** 2
    # * sc.arange(start=0, stop=number, dim='teapot')
    p0 = tz + ry * ((50 * sc.cos(theta)**2 + 20) * x)
    t_f_n = [teapot(intensity=i, transform=p0['teapot', i]) for i in range(p0.sizes['teapot'])]
    ts, fs, ns = list(zip(*t_f_n))
    names = ns[0]
    data = sc.concat(tuple(x.data for x in ts), dim=names['point'])
    intensity = sc.concat(tuple(x.coords[names['intensity']] for x in ts), dim=names['point'])
    mesh = sc.DataArray(data=data, coords={names['intensity']: intensity})
    return pp.mesh3d(mesh, fs[0], **names, **kwargs)


def test_one_teapot():
    obj = make_one_teapot_mesh3d()

    figure = obj.children[0]
    assert len(figure.artists) == 1
    artist = list(figure.artists.values())[0]

    vertices, faces = _teapot_vertices_faces()
    assert np.allclose(faces, artist._faces.values)
    assert np.allclose(vertices, artist._data.data.values)


def test_many_teapots():
    try:
        make_many_teapots_mesh3d()
        assert True
    except ValueError:
        assert False
